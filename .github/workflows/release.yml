name: cross-release
on:
    workflow_dispatch:
    push:
      tags:
        - '**'
env:
  PROJECT_NAME: smt

jobs:
  windows:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: windows-x86_64-msvc
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - name: windows-arm64-msvc
            runner: windows-latest
            target: aarch64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Build Binary
        shell: bash
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        run: |
          cargo build --release --target "${{matrix.target}}"
          mv target/${{matrix.target}}/release/${{env.PROJECT_NAME}}.exe ${{env.PROJECT_NAME}}_${{matrix.target}}.exe

      - name: upload Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{env.PROJECT_NAME}}_${{matrix.target}}.exe
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          generate_release_notes: true
          token: ${{ secrets.TOKEN }}

  linux:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: ubuntu-x86_64-gnu
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: ubuntu-aarch64-gnu
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Build Binary
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        run: |
          if [ '${{matrix.target}}' = 'aarch64-unknown-linux-gnu' ]; then
            sudo apt install gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu -y
            cargo build --release --target "${{matrix.target}}" --config target.${{matrix.target}}.linker=\"aarch64-linux-gnu-gcc\"
          else
            cargo build --release --target "${{matrix.target}}"
          fi
          mv target/${{matrix.target}}/release/${{env.PROJECT_NAME}} ${{env.PROJECT_NAME}}_${{matrix.target}}

      - name: upload Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{env.PROJECT_NAME}}_${{matrix.target}}
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          generate_release_notes: true
          token: ${{ secrets.TOKEN }}

  macos:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: macos-x86_64-gnu
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-aarch64-gnu
            runner: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Build Binary
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        run: |
          cargo build --release --target "${{matrix.target}}"
          mv target/${{matrix.target}}/release/${{env.PROJECT_NAME}} ${{env.PROJECT_NAME}}_${{matrix.target}}

      - name: upload Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{env.PROJECT_NAME}}_${{matrix.target}}
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          generate_release_notes: true
          token: ${{ secrets.TOKEN }}
